{"version":3,"sources":["App.js","serviceWorker.js","components/Edit.js","components/Create.js","components/Show.js","index.js"],"names":["GET_BOOKS","gql","_templateObject","App","react_default","a","createElement","react_apollo_esm","pollInterval","query","_ref","loading","error","data","concat","message","className","react_router_dom","to","books","map","book","index","key","_id","title","author","Component","Boolean","window","location","hostname","match","GET_BOOK","Edit_templateObject","UPDATE_BOOK","_templateObject2","Edit","isbn","description","published_year","publisher","_this","this","variables","bookId","props","params","id","mutation","onCompleted","history","push","updateBook","_ref2","onSubmit","e","preventDefault","value","parseInt","htmlFor","type","name","ref","node","placeholder","defaultValue","cols","rows","ADD_BOOK","Create_templateObject","Create","addBook","Show_templateObject","DELETE_BOOK","Show_templateObject2","Show","updated_date","removeBook","client","ApolloClient","uri","ReactDOM","render","react_router","exact","path","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.009d8b2e.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport './App.css';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\n\nconst GET_BOOKS = gql`\n  {\n    books {\n      _id\n      title\n      author\n    }\n  }\n`;\n\nclass App extends Component {\n\n  render() {\n    return (\n      <Query pollInterval={500} query={GET_BOOKS}>\n        {({ loading, error, data }) => {\n          if (loading) return 'Loading...';\n          if (error) return `Error! ${error.message}`;\n    \n          return (\n            <div className=\"container\">\n              <div className=\"panel panel-default\">\n                <div className=\"panel-heading\">\n                  <h3 className=\"panel-title\">\n                    LIST OF BOOKS\n                  </h3>\n                  <h4><Link to=\"/create\">Add Book</Link></h4>\n                </div>\n                <div className=\"panel-body\">\n                  <table className=\"table table-stripe\">\n                    <thead>\n                      <tr>\n                        <th>Title</th>\n                        <th>Author</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {data.books.map((book, index) => (\n                        <tr key={index}>\n                          <td><Link to={`/show/${book._id}`}>{book.title}</Link></td>\n                          <td>{book.author}</td>\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>\n                </div>\n              </div>\n            </div>\n          );\n        }}\n      </Query>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport gql from \"graphql-tag\";\nimport { Query, Mutation } from \"react-apollo\";\n\nconst GET_BOOK = gql`\n    query book($bookId: String) {\n        book(id: $bookId) {\n            _id\n            isbn\n            title\n            author\n            description\n            published_year\n            publisher\n            updated_date\n        }\n    }\n`;\n\nconst UPDATE_BOOK = gql`\n    mutation updateBook(\n        $id: String!,\n        $isbn: String!,\n        $title: String!,\n        $author: String!,\n        $description: String!,\n        $publisher: String!,\n        $published_year: Int!) {\n        updateBook(\n        id: $id,\n        isbn: $isbn,\n        title: $title,\n        author: $author,\n        description: $description,\n        publisher: $publisher,\n        published_year: $published_year) {\n            updated_date\n        }\n    }\n`;\n\nclass Edit extends Component {\n\n  render() {\n    let isbn, title, author, description, published_year, publisher;\n    return (\n        <Query query={GET_BOOK} variables={{ bookId: this.props.match.params.id }}>\n            {({ loading, error, data }) => {\n                if (loading) return 'Loading...';\n                if (error) return `Error! ${error.message}`;\n        \n                return (\n                    <Mutation mutation={UPDATE_BOOK} key={data.book._id} onCompleted={() => this.props.history.push(`/`)}>\n                        {(updateBook, { loading, error }) => (\n                            <div className=\"container\">\n                                <div className=\"panel panel-default\">\n                                    <div className=\"panel-heading\">\n                                        <h3 className=\"panel-title\">\n                                            EDIT BOOK\n                                        </h3>\n                                    </div>\n                                    <div className=\"panel-body\">\n                                        <h4><Link to=\"/\" className=\"btn btn-primary\">Book List</Link></h4>\n                                        <form onSubmit={e => {\n                                            e.preventDefault();\n                                            updateBook({ variables: { id: data.book._id, isbn: isbn.value, title: title.value, author: author.value, description: description.value, publisher: publisher.value, published_year: parseInt(published_year.value) } });\n                                            isbn.value = \"\";\n                                            title.value = \"\";\n                                            author.value = \"\";\n                                            description.value = \"\";\n                                            publisher.value = null;\n                                            published_year.value = \"\";\n                                        }}>\n                                            <div className=\"form-group\">\n                                                <label htmlFor=\"isbn\">ISBN:</label>\n                                                <input type=\"text\" className=\"form-control\" name=\"isbn\" ref={node => {\n                                                    isbn = node;\n                                                }} placeholder=\"ISBN\" defaultValue={data.book.isbn} />\n                                            </div>\n                                            <div className=\"form-group\">\n                                                <label htmlFor=\"title\">Title:</label>\n                                                <input type=\"text\" className=\"form-control\" name=\"title\" ref={node => {\n                                                    title = node;\n                                                }} placeholder=\"Title\" defaultValue={data.book.title} />\n                                            </div>\n                                            <div className=\"form-group\">\n                                                <label htmlFor=\"author\">Author:</label>\n                                                <input type=\"text\" className=\"form-control\" name=\"author\" ref={node => {\n                                                    author = node;\n                                                }} placeholder=\"Author\" defaultValue={data.book.author} />\n                                            </div>\n                                            <div className=\"form-group\">\n                                                <label htmlFor=\"description\">Description:</label>\n                                                <textarea className=\"form-control\" name=\"description\" ref={node => {\n                                                    description = node;\n                                                }} placeholder=\"Description\" cols=\"80\" rows=\"3\" defaultValue={data.book.description} />\n                                            </div>\n                                            <div className=\"form-group\">\n                                                <label htmlFor=\"author\">Publisher:</label>\n                                                <input type=\"text\" className=\"form-control\" name=\"publisher\" ref={node => {\n                                                    publisher = node;\n                                                }} placeholder=\"Publisher\" defaultValue={data.book.publisher} />\n                                            </div>\n                                            <div className=\"form-group\">\n                                                <label htmlFor=\"author\">Published Year:</label>\n                                                <input type=\"number\" className=\"form-control\" name=\"published_year\" ref={node => {\n                                                    published_year = node;\n                                                }} placeholder=\"Published Year\" defaultValue={data.book.published_year} />\n                                            </div>\n                                            <button type=\"submit\" className=\"btn btn-success\">Submit</button>\n                                        </form>\n                                        {loading && <p>Loading...</p>}\n                                        {error && <p>Error :( Please try again</p>}\n                                    </div>\n                                </div>\n                            </div>\n                        )}\n                    </Mutation>\n                );\n            }}\n        </Query>\n    );\n  }\n}\n\nexport default Edit;","import React, { Component } from 'react';\nimport gql from \"graphql-tag\";\nimport { Mutation } from \"react-apollo\";\nimport { Link } from 'react-router-dom';\n\nconst ADD_BOOK = gql`\n    mutation AddBook(\n        $isbn: String!,\n        $title: String!,\n        $author: String!,\n        $description: String!,\n        $publisher: String!,\n        $published_year: Int!) {\n        addBook(\n            isbn: $isbn,\n            title: $title,\n            author: $author,\n            description: $description,\n            publisher: $publisher,\n            published_year: $published_year) {\n            _id\n        }\n    }\n`;\n\nclass Create extends Component {\n  \n    render() {\n      let isbn, title, author, description, published_year, publisher;\n      return (\n        <Mutation mutation={ADD_BOOK} onCompleted={() => this.props.history.push('/')}>\n            {(addBook, { loading, error }) => (\n                <div className=\"container\">\n                    <div className=\"panel panel-default\">\n                        <div className=\"panel-heading\">\n                            <h3 className=\"panel-title\">\n                                ADD BOOK\n                            </h3>\n                        </div>\n                        <div className=\"panel-body\">\n                            <h4><Link to=\"/\" className=\"btn btn-primary\">Book List</Link></h4>\n                            <form onSubmit={e => {\n                                e.preventDefault();\n                                addBook({ variables: { isbn: isbn.value, title: title.value, author: author.value, description: description.value, publisher: publisher.value, published_year: parseInt(published_year.value) } });\n                                isbn.value = \"\";\n                                title.value = \"\";\n                                author.value = \"\";\n                                description.value = \"\";\n                                publisher.value = null;\n                                published_year.value = \"\";\n                            }}>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"isbn\">ISBN:</label>\n                                    <input type=\"text\" className=\"form-control\" name=\"isbn\" ref={node => {\n                                        isbn = node;\n                                    }} placeholder=\"ISBN\" />\n                                </div>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"title\">Title:</label>\n                                    <input type=\"text\" className=\"form-control\" name=\"title\" ref={node => {\n                                        title = node;\n                                    }} placeholder=\"Title\" />\n                                </div>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"author\">Author:</label>\n                                    <input type=\"text\" className=\"form-control\" name=\"author\" ref={node => {\n                                        author = node;\n                                    }} placeholder=\"Author\" />\n                                </div>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"description\">Description:</label>\n                                    <textarea className=\"form-control\" name=\"description\" ref={node => {\n                                        description = node;\n                                    }} placeholder=\"Description\" cols=\"80\" rows=\"3\" />\n                                </div>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"author\">Publisher:</label>\n                                    <input type=\"text\" className=\"form-control\" name=\"publisher\" ref={node => {\n                                        publisher = node;\n                                    }} placeholder=\"Publisher\" />\n                                </div>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"author\">Published Year:</label>\n                                    <input type=\"number\" className=\"form-control\" name=\"published_year\" ref={node => {\n                                        published_year = node;\n                                    }} placeholder=\"Published Year\" />\n                                </div>\n                                <button type=\"submit\" className=\"btn btn-success\">Submit</button>\n                            </form>\n                            {loading && <p>Loading...</p>}\n                            {error && <p>Error :( Please try again</p>}\n                        </div>\n                    </div>\n                </div>\n            )}\n        </Mutation>\n      );\n    }\n  }\n  \n  export default Create;","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport '../App.css';\nimport gql from 'graphql-tag';\nimport { Query, Mutation } from 'react-apollo';\n\nconst GET_BOOK = gql`\n    query book($bookId: String) {\n        book(id: $bookId) {\n            _id\n            isbn\n            title\n            author\n            description\n            published_year\n            publisher\n            updated_date\n        }\n    }\n`;\n\nconst DELETE_BOOK = gql`\n  mutation removeBook($id: String!) {\n    removeBook(id:$id) {\n      _id\n    }\n  }\n`;\n\nclass Show extends Component {\n\n  render() {\n    return (\n        <Query pollInterval={500} query={GET_BOOK} variables={{ bookId: this.props.match.params.id }}>\n            {({ loading, error, data }) => {\n                if (loading) return 'Loading...';\n                if (error) return `Error! ${error.message}`;\n        \n                return (\n                    <div className=\"container\">\n                        <div className=\"panel panel-default\">\n                            <div className=\"panel-heading\">\n                            <h4><Link to=\"/\">Book List</Link></h4>\n                                <h3 className=\"panel-title\">\n                                {data.book.title}\n                                </h3>\n                            </div>\n                            <div className=\"panel-body\">\n                                <dl>\n                                    <dt>ISBN:</dt>\n                                    <dd>{data.book.isbn}</dd>\n                                    <dt>Author:</dt>\n                                    <dd>{data.book.author}</dd>\n                                    <dt>Description:</dt>\n                                    <dd>{data.book.description}</dd>\n                                    <dt>Published Year:</dt>\n                                    <dd>{data.book.published_year}</dd>\n                                    <dt>Publisher:</dt>\n                                    <dd>{data.book.publisher}</dd>\n                                    <dt>Updated:</dt>\n                                    <dd>{data.book.updated_date}</dd>\n                                </dl>\n                                <Mutation mutation={DELETE_BOOK} key={data.book._id} onCompleted={() => this.props.history.push('/')}>\n                                    {(removeBook, { loading, error }) => (\n                                        <div>\n                                            <form\n                                                onSubmit={e => {\n                                                    e.preventDefault();\n                                                    removeBook({ variables: { id: data.book._id } });\n                                                }}>\n                                                <Link to={`/edit/${data.book._id}`} className=\"btn btn-success\">Edit</Link>&nbsp;\n                                                <button type=\"submit\" className=\"btn btn-danger\">Delete</button>\n                                            </form>\n                                        {loading && <p>Loading...</p>}\n                                        {error && <p>Error :( Please try again</p>}\n                                        </div>\n                                    )}\n                                </Mutation>\n                            </div>\n                        </div>\n                    </div>\n                );\n            }}\n        </Query>\n    );\n  }\n}\n\nexport default Show;","// import React from 'react';\n// import ReactDOM from 'react-dom';\n// import './index.css';\n// import App from './App';\n// import * as serviceWorker from './serviceWorker';\n\n// ReactDOM.render(<App />, document.getElementById('root'));\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Edit from './components/Edit';\nimport Create from './components/Create';\nimport Show from './components/Show';\n\nconst client = new ApolloClient({ uri: 'http://localhost:3000/graphql' });\n\nReactDOM.render(\n    <ApolloProvider client={client}>\n        <Router>\n            <div>\n                <Route exact path='/' component={App} />\n                <Route path='/edit/:id' component={Edit} />\n                <Route path='/create' component={Create} />\n                <Route path='/show/:id' component={Show} />\n            </div>\n        </Router>\n    </ApolloProvider>, \n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}